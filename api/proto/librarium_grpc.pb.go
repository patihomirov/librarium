// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/librarium.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibrariumClient is the client API for Librarium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibrariumClient interface {
	// Sends a Autor
	GetAuthor(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error)
	// Sends a Books
	GetBooks(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error)
}

type librariumClient struct {
	cc grpc.ClientConnInterface
}

func NewLibrariumClient(cc grpc.ClientConnInterface) LibrariumClient {
	return &librariumClient{cc}
}

func (c *librariumClient) GetAuthor(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, "/librarium.Librarium/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *librariumClient) GetBooks(ctx context.Context, in *DataRequest, opts ...grpc.CallOption) (*DataReply, error) {
	out := new(DataReply)
	err := c.cc.Invoke(ctx, "/librarium.Librarium/GetBooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibrariumServer is the server API for Librarium service.
// All implementations should embed UnimplementedLibrariumServer
// for forward compatibility
type LibrariumServer interface {
	// Sends a Autor
	GetAuthor(context.Context, *DataRequest) (*DataReply, error)
	// Sends a Books
	GetBooks(context.Context, *DataRequest) (*DataReply, error)
}

// UnimplementedLibrariumServer should be embedded to have forward compatible implementations.
type UnimplementedLibrariumServer struct {
}

func (UnimplementedLibrariumServer) GetAuthor(context.Context, *DataRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedLibrariumServer) GetBooks(context.Context, *DataRequest) (*DataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooks not implemented")
}

// UnsafeLibrariumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibrariumServer will
// result in compilation errors.
type UnsafeLibrariumServer interface {
	mustEmbedUnimplementedLibrariumServer()
}

func RegisterLibrariumServer(s grpc.ServiceRegistrar, srv LibrariumServer) {
	s.RegisterService(&Librarium_ServiceDesc, srv)
}

func _Librarium_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrariumServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarium.Librarium/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrariumServer).GetAuthor(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Librarium_GetBooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibrariumServer).GetBooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/librarium.Librarium/GetBooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibrariumServer).GetBooks(ctx, req.(*DataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Librarium_ServiceDesc is the grpc.ServiceDesc for Librarium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Librarium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "librarium.Librarium",
	HandlerType: (*LibrariumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthor",
			Handler:    _Librarium_GetAuthor_Handler,
		},
		{
			MethodName: "GetBooks",
			Handler:    _Librarium_GetBooks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/librarium.proto",
}
